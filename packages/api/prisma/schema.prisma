generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String        @id @default(uuid())
  phone     String        @unique
  name      String?
  lists     GroceryList[]
  addresses Address[]
  createdAt DateTime      @default(now()) @map("created_at")

  @@map("users")
}

model Address {
  id         String    @id @default(uuid())
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?   @map("user_id")
  merchant   Merchant? @relation(fields: [merchantId], references: [id])
  merchantId String?   @map("merchant_id")
  line1      String
  city       String?
  createdAt  DateTime  @default(now()) @map("created_at")

  @@map("addresses")
}

model Merchant {
  id          String         @id @default(uuid())
  name        String
  rating      Float          @default(0)
  quotes      Quote[]
  docs        MerchantDoc[]
  catalog     CatalogItem[]
  addresses   Address[]
  createdAt   DateTime       @default(now()) @map("created_at")

  @@map("merchants")
}

model MerchantDoc {
  id         String   @id @default(uuid())
  merchant   Merchant @relation(fields: [merchantId], references: [id])
  merchantId String   @map("merchant_id")
  docType    String   @map("doc_type")
  url        String
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("merchant_docs")
}

model CatalogItem {
  id         String   @id @default(uuid())
  merchant   Merchant @relation(fields: [merchantId], references: [id])
  merchantId String   @map("merchant_id")
  name       String
  price      Float
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("catalog_items")
}

model GroceryList {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  rawText   String?  @map("raw_text")
  quotes    Quote[]
  createdAt DateTime @default(now()) @map("created_at")

  @@map("grocery_lists")
}

model Quote {
  id         String      @id @default(uuid())
  list       GroceryList @relation(fields: [listId], references: [id])
  listId     String      @map("list_id")
  merchant   Merchant    @relation(fields: [merchantId], references: [id])
  merchantId String      @map("merchant_id")
  total      Float
  status     String      @default("pending")
  order      Order?
  createdAt  DateTime    @default(now()) @map("created_at")

  @@map("quotes")
}

model Order {
  id        String   @id @default(uuid())
  quote     Quote    @relation(fields: [quoteId], references: [id])
  quoteId   String   @map("quote_id")
  status    String   @default("pending")
  delivery  Delivery?
  review    Review?
  dispute   Dispute?
  createdAt DateTime @default(now()) @map("created_at")

  @@map("orders")
}

model Delivery {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @map("order_id")
  status    String   @default("pending")
  proofUrl  String?  @map("proof_url")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("deliveries")
}

model Review {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @map("order_id")
  rating    Int
  createdAt DateTime @default(now()) @map("created_at")

  @@map("reviews")
}

model Dispute {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @map("order_id")
  reason    String?
  status    String   @default("open")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("disputes")
}

model AuditLog {
  id        String   @id @default(uuid())
  action    String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @map("user_id")
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")

  @@map("audit_logs")
}

